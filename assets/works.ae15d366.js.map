{"version":3,"mappings":"sDAQO,WAAiB,EAAuB,CAC7C,KAAM,GAAO,IAER,aAAa,kBAAS,aAAc,GACpC,kBAAkB,kBAAS,kBAAmB,KAEnD,EAAY,CAAO,EAEA,aACjB,EAAK,WAAa,GAClB,EAAK,gBAAkB,IACzB,CAEO,QACT,66CCDwE,mBAChE,QAAgB,mpBAChB,EAA2B,GAEjC,SAAW,KAAQ,GAAe,CAC1B,MAAE,eAAgB,KAAM,GAC5B,EACC,KAAM,GAAc,IACvB,EACA,EAAM,KAAK,CAAW,CACxB,CAEO,QACT,CAEA,iBAAoC,EAAqC,CACvE,MAAO,MAAM,GACX,eAAe,aACf,KAAM,GAAO,eAAe,YAC9B,EACF,CAEA,iBACE,EACA,EACuB,CACvB,KAAM,CAAE,eAAgB,EAClB,EAAU,EAAK,MAAM,eAAe,EACpC,EAAO,IAAY,KAAO,EAAQ,GAAK,GACvC,EAAW,MAAM,GAAO,eAAe,eAAqB,WAE3D,OACL,GAAG,EACH,YAAa,CACX,GAAG,EACH,OACA,UACA,YAAa,GAAI,MAAK,EAAY,WAAW,CAC/C,EAEJ","names":[],"sources":["../../src/mixins/page.ts","../../src/helpers/works.ts"],"sourcesContent":["import { usePageStore } from \"@/stores/page\";\nimport { onUnmounted } from \"vue\";\n\ninterface PageOptions {\n  isFullPage?: boolean;\n  backgroundImage?: string;\n}\n\nexport function usePage(options?: PageOptions) {\n  const page = usePageStore();\n\n  page.isFullPage = options?.isFullPage || false;\n  page.backgroundImage = options?.backgroundImage || null;\n\n  onUnmounted(destroy);\n\n  function destroy() {\n    page.isFullPage = false;\n    page.backgroundImage = null;\n  }\n\n  return page;\n}\n","import type { VNode } from \"vue\";\n\nexport interface WorkMarkdown {\n  default: VNode;\n  frontmatter: WorkFrontmatter;\n}\n\nexport interface WorkFrontmatter {\n  title: string;\n  description: string;\n  slug: string;\n  preview: string;\n  publishDate: Date;\n  tags: string[];\n}\n\ninterface WorkMarkdownRaw {\n  default: VNode;\n  frontmatter: Record<string, string>;\n}\n\nexport async function getWorkFrontmatters(): Promise<WorkFrontmatter[]> {\n  const workMarkdowns = import.meta.glob(\"../../works/*/index.md\");\n  const works: WorkFrontmatter[] = [];\n\n  for (const path in workMarkdowns) {\n    const { frontmatter } = await getWorkMarkdown(\n      path,\n      (await workMarkdowns[path]()) as WorkMarkdownRaw\n    );\n    works.push(frontmatter);\n  }\n\n  return works;\n}\n\nexport async function getWorkBySlug(slug: string): Promise<WorkMarkdown> {\n  return await getWorkMarkdown(\n    `../../works/${slug}/index.md`,\n    await import(`../../works/${slug}/index.md`)\n  );\n}\n\nasync function getWorkMarkdown(\n  path: string,\n  markdown: WorkMarkdownRaw\n): Promise<WorkMarkdown> {\n  const { frontmatter } = markdown;\n  const matches = path.match(/works\\/(.*)\\//);\n  const slug = matches !== null ? matches[1] : \"\";\n  const preview = (await import(`../../works/${slug}/preview.jpg`)).default;\n\n  return {\n    ...markdown,\n    frontmatter: {\n      ...frontmatter,\n      slug,\n      preview,\n      publishDate: new Date(frontmatter.publishDate),\n    } as WorkFrontmatter,\n  } as WorkMarkdown;\n}\n"],"file":"assets/works.ae15d366.js"}